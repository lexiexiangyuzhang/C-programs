#include <iostream>
#include <climits>
using namespace std;
int strToInt(char* str){
	// Define variables to store the number to be converted, the current digit position, and the char value of the current digit  
	unsigned int number = 0;
	unsigned int maxValue = INT_MAX;
	unsigned int currDigit = 0;
	char currDigitStr = str[0];

	// 1. Check if there is a minus sign at the front
	//    If yes, move to the next digit position
	bool minusSign = (currDigitStr == '-');
	if (minusSign){
		currDigit = 1;
		currDigitStr = str[1];
		maxValue = maxValue+1;
	}
	
	// 2. Calculate the number on a digit-by-digit basis using base-10 arithmetic
	//	  Repeat the process until end of text string is reached
	while (currDigitStr != '\0'){
		
		// A. If the current digit string is not between 0 to 9, something is wrong
		//    In this case, simply return INT_MIN as the return value
		if (currDigitStr < '0' || currDigitStr > '9'){
			cerr << "Error in integer string conversion" << endl;
			return 0;
		}
		
		// B. Update the number via: 
		//		(1) multiplying current value by 10
		//		(2) Add the value of the current digit 
		//				(found by subtracting the ASCII value of 0 from the current digit's ASCII value)

		// Note: Premature function end if the number is going to be larger than the limits of int variables
		if ( number > maxValue/10 ){
			cerr << "Error: Numerical value of text string is beyond limits of int variables" << endl;
			return INT_MIN;
		}
		else
			number *= 10;

		unsigned int currDigitIntValue = currDigitStr - '0';
		if ( currDigitIntValue > maxValue-number ){
			cerr << "Error: Numerical value of text string is beyond limits of int variables" << endl;
			return INT_MIN;
		}
		else
			number += currDigitIntValue;
		
		// C. Move to the next digit and update the digit's char value accordingly 
		currDigit++;
		currDigitStr = str[currDigit];
	}
	
	// 3. If there is a minus sign, return the negated value of the number; 
	//	  otherwise, just return the number value
	return minusSign? (-number) : number;
}

int convertToIntArray (int argc, char* argv[], int array[]) {
	if (argc <3)
		cerr << "Error: not enough input";
	if (argc > 22)
        return -21;
   
    for (int w=1; w< argc; w++){
		int y=0;
		y = strToInt(argv[w]);
		if (y==0)
			return -w;
		else {
			array[w-1]=y;}

		}
	return argc-2;
}

int slideAvg(int inputVoltage[], int samplesize, int windowsize, float slidingAverage[]){
		    for (int a=1; a<=samplesize+1-windowsize;a++){
	    	float k=0;
	    	for (int b=0;b<windowsize;b++){
	    		k += inputVoltage[a+b];}
	    		slidingAverage[a]=k/4;}
		return samplesize+1-windowsize;
}

void displayHistogram(int numElements, float array[]){
	  cout <<"100V------105V------110V------115V------120V------125V------130V------135V------140V "<<endl;
	  for (int k=1; k<argc-1; k++){
		int b=0;
		if(array[k]>100 && array[k]<140){
		b = (array[k]-100)*2;
		for(int c=0; c<b+1;c++)
			cout << "#";
		cout <<endl;}
		if(array[k]<100){
			cout <<"!";
			cout<<endl;
		}
		if (array[k]>140){
			for (int n=0; n<81; n++)
				cout <<"#";
			cout<< "+" <<endl;}}

    cout <<a <<"jjj" <<endl;

    cout <<"100V------105V------110V------115V------120V------125V------130V------135V------140V "<<endl;
	for (int m=0; m<a; m++){
		int b=0;
		if(slidingAverage[m]>100 && slidingAverage[m]<140){
		b = (slidingAverage[m]-100)*2;
		for(int c=0; c<b+1;c++)
			cout << "#";
		cout <<endl;}
		if(slidingAverage[m]<100){
			cout <<"!";
			cout<<endl;
		}
		if (slidingAverage[m]>140){
			for (int n=0; n<81; n++)
				cout <<"#";
			cout<< "+" <<endl;}

	}

}

int main(int argc, char* argv[]) {
	int array[argc-1];

	int f = convertToIntArray(argc, argv, array);
	int r = argc-array[0]-1;
	float slidingAverage[r];

	for (int d=0; d< argc-1; d++){
		cout << array[d]  << "r"<<endl;
	}
 
	if(f <0){
		int q = -f;
		cerr<< "Error: Argument " << q << " is not an integer." <<endl;
		return -1;
	}

	if (f ==-21) {
       cerr << "Error: too many input arguments; maximum 20 permitted." <<endl;
       return -1;
	}
	cout << f <<endl <<array[0] <<endl;
    
    float chain[argc-1-array[0]];
	for (int s=0; s<=argc-1-array[0];s++){
	}	   

	int a = slideAvg(array,f, array[0], slidingAverage);
	for(int y=0; y<a;y++)
		cout << slidingAverage[y] <<endl;

    if (array[0] > argc-2){
    cerr <<"Error: does not match";}
    if (array[0]==0)
    cerr <<"Error: does not match";


    cout <<"100V------105V------110V------115V------120V------125V------130V------135V------140V "<<endl;
	for (int k=1; k<argc-1; k++){
		int b=0;
		if(array[k]>100 && array[k]<140){
		b = (array[k]-100)*2;
		for(int c=0; c<b+1;c++)
			cout << "#";
		cout <<endl;}
		if(array[k]<100){
			cout <<"!";
			cout<<endl;
		}
		if (array[k]>140){
			for (int n=0; n<81; n++)
				cout <<"#";
			cout<< "+" <<endl;}}

    cout <<a <<"jjj" <<endl;

    cout <<"100V------105V------110V------115V------120V------125V------130V------135V------140V "<<endl;
	for (int m=0; m<a; m++){
		int b=0;
		if(slidingAverage[m]>100 && slidingAverage[m]<140){
		b = (slidingAverage[m]-100)*2;
		for(int c=0; c<b+1;c++)
			cout << "#";
		cout <<endl;}
		if(slidingAverage[m]<100){
			cout <<"!";
			cout<<endl;
		}
		if (slidingAverage[m]>140){
			for (int n=0; n<81; n++)
				cout <<"#";
			cout<< "+" <<endl;}

    
}
}
